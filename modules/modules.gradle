// modules.gradle
/**
 * MIT License
 * Copyright (c) 2017 kkdt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

description = "Multiple modules/projects build"

subprojects {
   apply plugin: 'java'
   apply plugin: 'maven'
   
   group = 'kkdt'

   sourceCompatibility = 1.8
   targetCompatibility = 1.8

   ext {
      localLib = projectLib
      sharedManifest = manifest {
         attributes('Implementation-Title': 'kkdt-boot',
           'Implementation-Version': version,
           'Main-Class':'kkdt.boot.StandardApplicationRunner')
      }
   }
   
   // override jar task from java plugin
   jar {
      destinationDir = localLib
      manifest = project.manifest {
         from sharedManifest
      }
   }
   
   repositories {
      jcenter()
      maven {
         url "http://repo.maven.apache.org/maven2"
      }
   }

   dependencies {
      compile("org.springframework.boot:spring-boot:1.3.3.RELEASE")

      testCompile ('org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE') {
         exclude module: 'spring-boot-starter-logging'
         exclude module: 'spring-boot-starter-log4j'
         exclude module: 'logback-classic'
      }
      testCompile 'junit:junit:4.12'
      testCompile 'org.springframework.boot:spring-boot-starter-test:1.3.3.RELEASE'
      testCompile 'log4j:log4j:1.2.17'

      // include not only compile but also test classpath for eclipse
      eclipseLibs configurations.testCompileClasspath

      // gather up all source files for each subproject
      eclipseSources files(sourceSets.collect().collect {
         it.java.srcDirs + it.resources.srcDirs
      })
   }

   task jarTests(type : Jar, dependsOn:['test'], description:'Jar compiled test artifacts') {
      from sourceSets.test.output
      from sourceSets.test.resources
      classifier "tests"
      destinationDir = localLib
      manifest = project.manifest {
         from sharedManifest
      }
   }

   task jarAll(type : Jar, dependsOn:['test'], description:'Jar source and test artifacts') {
      from sourceSets.main.allSource
      from sourceSets.test.allSource
      classifier "all"
      destinationDir = localLib
      manifest = project.manifest {
         from sharedManifest
      }
   }
   
   task jarSources(type: Jar, dependsOn: classes, description:'Generate source artifacts') {
      from sourceSets.main.allSource
      classifier = 'sources'
      destinationDir = localLib
   }
   
   task jarJavadocs(type: Jar, dependsOn: javadoc, description:'Generate Javadoc artifacts') {
      from javadoc.destinationDir
      classifier = 'javadoc'
      destinationDir = localLib
   }
   
   /**
    * Add additional artifacts.
    */
   artifacts {
      archives jar
      archives jarTests
      archives jarAll
      archives jarSources
      archives jarJavadocs
   }
   
   /**
    * Override to clean up additional artifacts
    */
   cleanAll {
      doLast {
         delete jarAll.archivePath
         delete jarTests.archivePath
         delete jarSources.archivePath
         delete jarJavadocs.archivePath
      }
   }
}

task clean(description:'Non-Java plugin clean') {
   
}
